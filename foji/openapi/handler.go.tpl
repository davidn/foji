{{- define "methodSignature"}}
    {{- $op := .RuntimeParams.op -}}
    {{- $body := .GetRequestBody $op -}}
    {{- if not (empty ($.OpSecurity $op)) }} user *{{ $.CheckPackage $.Params.Auth "http" -}},{{- end }}
    {{- range $param := $op.Parameters -}}
        {{ goToken (camel $param.Value.Name) }} {{ if and (not $param.Value.Required) (not (eq $param.Value.Schema.Value.Type "array")) }}*{{ end }}{{ $.GetType "" $param.Value.Name $param.Value.Schema }},
    {{- end -}}
    {{- if isNotNil $body}}
            {{- $type := $.GetType "http" (print $op.OperationID "Request") $body.Schema }} body {{ $type  -}}
    {{- end -}}
	) (
    {{- $response := $.GetOpHappyResponseType "http" .RuntimeParams.op}}
    {{- if notEmpty $response}}{{ $.CheckPackage $response "http"}}, {{ end }}error)
{{- end -}}

{{- define "paramExtractionFunc" -}}
    {{- $source := .RuntimeParams.source }}
    {{- $type := .RuntimeParams.type }}
    {{- pascal $source -}}
    {{- if eq $type "[]string" -}}Strings
    {{- else }}{{pascal $type}}{{end -}}
{{- end -}}

{{- define "paramExtraction" -}}
    {{- $param := .RuntimeParams.param }}
    {{- $goType := ($.GetType "" $param.Value.Name $param.Value.Schema) }}
    {{- $required := $param.Value.Required }}
    {{- $getRequiredParamFunction := "" -}}
    {{- if eq $param.Value.Schema.Value.Type "array" -}}
        {{- if eq $goType "[]int32" -}}
            {{- $getRequiredParamFunction = "GetInt32Array" -}}
        {{- else }}
            {{- $getRequiredParamFunction = "GetStringArray" -}}
        {{- end -}}
    {{- else -}}
        {{- if eq $goType "bool" -}}
            {{- $getRequiredParamFunction = "GetBool" -}}
        {{- else if eq $goType "int32" -}}
            {{- $getRequiredParamFunction = "GetInt32" -}}
        {{- else if eq $goType "int64" -}}
            {{- $getRequiredParamFunction = "GetInt64" -}}
        {{- else if eq $goType "time.Time" }}
            {{- $getRequiredParamFunction = "GetTime" -}}
        {{- else }}
            {{- $getRequiredParamFunction = "GetString" -}}
        {{- end -}}
    {{- end -}}

	{{- if or $required (eq $param.Value.Schema.Value.Type "array")}}
	{{ goToken (camel $param.Value.Name) }}, _, err := params.{{ $getRequiredParamFunction }}(r, "{{ $param.Value.Name }}", {{ $required }})
	if err != nil {
		validationErrors.Add("{{ $param.Value.Name }}", err)
	}
	{{- else -}}
	var {{ goToken (camel $param.Value.Name) }} *{{$goType}}
	{{ goToken (camel $param.Value.Name) }}Val, ok, err := params.{{ $getRequiredParamFunction }}(r, "{{ $param.Value.Name }}", {{ $required }})
	if err != nil {
		validationErrors.Add("{{ $param.Value.Name }}", err)
	}

	if ok {
		{{ goToken (camel $param.Value.Name) }} = &{{ goToken (camel $param.Value.Name) }}Val
	}
	{{- end -}}
{{- end -}}
{{- $package := "http" -}}

// Code generated by foji {{ version }}, template: {{ templateFile }}; DO NOT EDIT.

package {{ $package }}

import (
	"context"
	"encoding/json"
	"io"
	"net/http"

	"github.com/bir/iken/httputil"
	"github.com/bir/iken/logctx"
	"github.com/bir/iken/params"
	"github.com/bir/iken/validation"
	"github.com/go-chi/chi/v5"
	"{{ $.Params.Package}}"
{{- .CheckAllTypes $package $.Params.Auth -}}
{{- range .GoImports }}
	"{{ . }}"
{{- end }}
)

type Service interface {
{{- range $name, $path := .API.Paths }}
    {{- range $verb, $op := $path.Operations }}
        {{- $opResponse := $.GetOpHappyResponse $package $op }}
	{{ pascal $op.OperationID}}(ctx context.Context,
        {{- template "methodSignature" ($.WithParams "op" $op "Package" $package) }}
    {{- end }}
{{- end }}
}

type OpenAPIHandlers struct {
	service      Service
{{- if .HasAuthentication }}
    {{- range $security, $value := .API.Components.SecuritySchemes }}
	{{ camel $security }}Auth HttpAuthFunc
    {{- end }}
{{- if .HasAuthorization }}
    authorize Authorizer
{{- end}}
{{- end}}
{{- range $name, $path := .API.Paths }}
    {{- range $verb, $op := $path.Operations }}
        {{- if not ($.IsSimpleAuth $op) }}
	{{ camel $op.OperationID}}AuthGroups SecurityGroups
        {{- end}}
    {{- end}}
{{- end}}
}

func RegisterOperations(svc Service, r chi.Router
{{- if .HasAuthentication }}
{{- range $security, $value := .API.Components.SecuritySchemes -}}
    , {{ camel $security }}Auth
{{- end }} HttpAuthFunc
{{- if .HasAuthorization }}
    , authorize Authorizer
{{- end -}}
{{- end -}}
) *OpenAPIHandlers {
	s := OpenAPIHandlers{service: svc
{{- if .HasAuthentication }}
{{- range $security, $value := .API.Components.SecuritySchemes -}}
    , {{ camel $security }}Auth: {{ camel $security }}Auth
{{- end -}}
{{- if .HasAuthorization }}
	, authorize: authorize{{- end -}}
{{- end -}}

}
{{ range $name, $path := .API.Paths }}
    {{- range $verb, $op := $path.Operations }}
	r.{{pascal $verb}}("{{$name}}", http.HandlerFunc(s.{{ pascal $op.OperationID}}))
    {{- end }}
{{- end }}

{{ range $name, $path := .API.Paths }}
    {{- range $verb, $op := $path.Operations }}
        {{- if not ($.IsSimpleAuth $op) }}
	s.{{ camel $op.OperationID}}AuthGroups = NewSecurityGroups(
            {{- $securityList := $.OpSecurity $op }}
            {{- range $securityGroup := $securityList -}}
                SecurityGroup{}
                {{- range $security, $scopes := $securityGroup -}}
                    .Add("{{camel $security}}",{{camel $security}}Auth
                    {{- if not (empty $scopes) -}}
                        {{- range $scopes -}}
                            , "{{.}}"
                        {{- end -}}
                    {{- end -}}
                    )
                {{- end -}},
            {{- end -}})
        {{- end}}
    {{- end}}
{{- end}}

	return &s
}

{{- range $name, $path := .API.Paths }}
    {{- range $verb, $op := $path.Operations }}
        {{- $opResponse := $.GetOpHappyResponse $package $op }}
        {{- $opBody := $.GetRequestBody $op }}

{{ goDoc (print (pascal $op.OperationID) " " $op.Description) }}.
func (h OpenAPIHandlers) {{ pascal $op.OperationID}}(w http.ResponseWriter, r *http.Request) {
	var err error
        {{- $securityList := $.OpSecurity $op }}

	logctx.AddStrToContext(r.Context(), "op", "{{$op.OperationID}}")

        {{- if $.IsSimpleAuth $op }}
            {{- $lastAuth := "" }}
            {{- range $securityGroup := $securityList }}
                {{- range $security, $scopes := $securityGroup }}
                    {{- if eq $lastAuth $security }}
                    {{- else }}

	authCtx, err := h.{{ camel $security }}Auth(r)
                        {{- $lastAuth = $security -}}
                    {{- end -}}
                {{- end -}}
            {{- end }}
            {{- $authCt := 0 }}
            {{- range $securityGroup := $securityList }}
                {{- range $security, $scopes := $securityGroup }}
                    {{- if not (empty $scopes) }}
                        {{- if eq $authCt 0 }}
if err == nil {
                        {{- else }}
if err != nil {
                        {{- end }}
err = h.authorize(authCtx{{range $scopes}}, "{{.}}"{{end}})
                        {{- $authCt = inc $authCt }}
                    {{- end}}
                {{- end}}
            {{- end}}
            {{- repeat $authCt "}\n" }}
        {{- else }}

	authCtx, err := doAuthorize(r, {{- if $.HasAuthorization }}h.authorize,{{end}} h.{{ camel $op.OperationID}}AuthGroups...)
        {{- end -}}
        {{- if $.HasAnyAuth $op }}
	if err != nil {
		httputil.ErrorHandler(w, r, err)

		return
	}
        {{- end}}
        {{- if not (empty $op.Parameters) }}
	var validationErrors validation.Errors

        {{- range $param := $op.Parameters }}

	{{ template "paramExtraction" ($.WithParams "param" $param "Package" $package) }}
        {{- end }}

	if validationErrors != nil {
		httputil.ErrorHandler(w, r, validationErrors.GetErr())

		return
	}
		{{- end}}

        {{- $hasBody := not (empty $opBody)}}
		{{- if $hasBody }}
			{{- $bodyType := $.GetType $package (print (pascal $op.OperationID) "Request") $opBody.Schema}}
			{{- if notEmpty $opBody.Schema.Ref }}
				{{- $bodyType = $.GetTypeName $package $opBody.Schema}}
			{{- end }}

				{{- if $opBody.IsJson }}

	var body {{ $bodyType }}
	if err = json.NewDecoder(r.Body).Decode(&body); err != nil {
		httputil.ErrorHandler(w, r, validation.Error{Source:err})

		return
	}
        	{{- end }}
			{{- if $opBody.IsText }}

	b, err := io.ReadAll(r.Body)
	_ = r.Body.Close()

	if err != nil {
		httputil.ErrorHandler(w, r, validation.Error{Message:"unable to read body", Source:err})

		return
	}

	body := string(b)
        	{{- end -}}
        {{- end -}}

        {{- $responseGoType := $opResponse.GoType}}
        {{- if notEmpty $responseGoType }}

	response, err := h.service.{{ pascal $op.OperationID}}(r.Context(),
        {{- else}}

	err = h.service.{{ pascal $op.OperationID}}(r.Context(),
        {{- end}}
        {{- if not (empty $securityList) }} authCtx,{{- end -}}
        {{- range $param := $op.Parameters }} {{ goToken (camel $param.Value.Name) }},{{- end -}}
        {{- if $hasBody }} body{{- end -}}

        )
	if err != nil {
		httputil.ErrorHandler(w, r, err)

		return
	}

        {{- $key := $.GetOpHappyResponseKey $op }}
        {{- if notEmpty $responseGoType }}

	httputil.JSONWrite(w, r, {{$key}}, response)
        {{- else }}

	w.WriteHeader({{$key}})
        {{- end }}
}

    {{- end }}
{{- end }}
